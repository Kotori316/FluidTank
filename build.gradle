import java.nio.file.Files
import java.nio.file.Paths
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        // classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id("maven-publish")
    id("scala")
    id "com.github.breadmoirai.github-release" version "2.2.12"
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
// apply plugin: 'org.spongepowered.mixin'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

version = project.getProperty("modVersion")
if (isInCI()) {
    // In remote CI/CD environment
    version = (project.getProperty("modVersion") + "_" + (System.getenv("GITHUB_SHA") ?: "NOT_GIT").substring(0, 7))
}

private static boolean isInCI() {
    return Boolean.valueOf(System.getenv("GITHUB_ACTIONS")) || Boolean.valueOf(System.getenv("CI"))
}

group = "com.kotori316" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "LargeFluidTank"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

compileScala {
    scalaCompileOptions.additionalParameters = ["-Wconf:cat=deprecation:w,any:e"]
    //noinspection SpellCheckingInspection
    options.forkOptions.jvmArgs += ["-Duser.language=en", "-Duser.country=US"]
}

String forgeVersion() {
    String versionNumber

    if (isInCI() && System.getenv("CI_FORGE") != null && "default" != System.getenv("CI_FORGE")) {
        versionNumber = System.getenv("CI_FORGE")
    } else {
        versionNumber = project.forgeVersion
    }
    return "net.minecraftforge:forge:" + versionNumber
}

println("Java: ${System.getProperty('java.version')} " +
        "JVM: ${System.getProperty('java.vm.version')}(${System.getProperty('java.vendor')}) " +
        "Arch: ${System.getProperty('os.arch')}")

def commonRunSetting = {
    // Recommended logging data for a userdev environment
    property('forge.logging.markers', 'REGISTRIES')
    property('mixin.env.remapRefMap', 'true')
    property('mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg")
    property("mixin.debug.export", "true")
    property('forge.logging.console.level', 'debug')

    mods {
        fluidtank {
            source sourceSets.main
        }
    }
}

minecraft {
    // mappings channel: 'parchment', version: (project.parchmentMapping as String)
    mappings channel: 'official', version: (project.minecraftVersion as String)
    // accessTransformer = file('build/resources/main/META-INF/accesstransformer.cfg')
    runs {
        client {
            with commonRunSetting
            workingDirectory file('Minecraft')

            // From https://github.com/SlimeKnights/TinkersConstruct/blob/1.18/build.gradle
            if (project.hasProperty('mc_uuid')) {
                // Your uuid without any dashes in the middle
                args '--uuid', project.getProperty('mc_uuid')
            }
            if (project.hasProperty('mc_username')) {
                // Your username/display name, this is the name that shows up in chat
                // Note: This is not your email, even if you have a Mojang account
                args '--username', project.getProperty('mc_username')
            }
            // Your access token, you can find it in your '.minecraft/launcher_profiles.json' file
            // If not set, use "0" to prevent authentication exception.
            args '--accessToken', project.findProperty('mc_token') ?: "0"
        }

        server {
            with commonRunSetting
            workingDirectory file('run-server')
        }

        data {
            with commonRunSetting
            workingDirectory file('run-server')
            setForceExit(false)
            args('--mod', "fluidtank", '--all')
        }

        gameTestServer {
            with commonRunSetting
            workingDirectory file("${project.buildDir}/game_test")
            setForceExit(false)
            property 'forge.enabledGameTestNamespaces', 'fluidtank'
            jvmArgs("-EnableAssertions".toLowerCase())

            mods {
                fluidtank {
                    source sourceSets.test
                }
            }
            lazyToken("minecraft_classpath") {
                configurations.game_test.collect { it.absolutePath }.join(File.pathSeparator)
            }
        }
    }
}

task deleteGateTestWorld(type: Delete) {
    delete("${project.buildDir}/game_test")
    onlyIf { file("${project.buildDir}/game_test").exists() }
}

task copyGameTestTemplate(type: Copy, dependsOn: deleteGateTestWorld) {
    //noinspection SpellCheckingInspection
    from("src/test/resources/data/fluidtank/gameteststructures/")
    into("${project.buildDir}/game_test/gameteststructures/")
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

repositories {
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
        content {
            it.includeGroup("mezz.jei")
            it.includeModule("knightminer", "Inspirations")
            it.includeModule("slimeknights.mantle", "Mantle")
        }
    }
    maven {
        // location of a maven mirror for many mods, as a fallback
        name = "ModMaven.k-4u.nl"
        url = "https://modmaven.dev/"
        content {
            it.includeGroup("appeng")
        }
    }
    maven {
        name = "Azure-SLP"
        url = uri("https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1")
        content {
            it.includeModule("com.kotori316", "ScalableCatsForce".toLowerCase())
            it.includeModule("com.kotori316", "ScalableCatsForce-MixIn".toLowerCase())
            it.includeVersion("org.typelevel", "cats-core_2.13", project.cats_version as String)
            it.includeVersion("org.typelevel", "cats-kernel_2.13", project.cats_version as String)
        }
    }
    maven {
        url = "https://www.cursemaven.com"
        content {
            it.includeGroup("curse.maven")
        }
    }
    maven {
        name = "Mixin"
        url = 'https://repo.spongepowered.org/maven'
        content {
            it.includeGroup("org.spongepowered")
        }
    }
}

private boolean hasGitHubToken() {
    return project.hasProperty("githubToken") || System.getenv("REPO_TOKEN") != null
}

configurations {
    game_test
}

dependencies {
    def versionNumber = forgeVersion()
    minecraft(versionNumber)
    System.out.println("Detected $versionNumber with Minecraft ${project.minecraftVersion}" as String)
    implementation(group: 'org.scala-lang', name: 'scala-library', version: '2.13.8')
    implementation(group: 'org.typelevel', name: "cats-core_2.13", version: project.cats_version)

    /*if (!isInCI()) {
        runtimeOnly(fg.deobf("curse.maven:create-328085:3167531"))
        runtimeOnly(fg.deobf("knightminer:Inspirations:1.16.5-1.2.2.27"))
        runtimeOnly(fg.deobf("slimeknights.mantle:Mantle:1.16.5-1.6.79"))
    }*/
    if (System.getenv("IGNORE_OTHER_MODS_IN_RUNTIME") == null) {
        implementation(fg.deobf("mezz.jei:jei-1.18.2:" + project.jeiVersion))
        implementation(fg.deobf("curse.maven:jade-324717:${project.jade_id}"))
        implementation(fg.deobf("curse.maven:the-one-probe-245211:3550084"))
        implementation(fg.deobf("appeng:appliedenergistics2:${project.ae2Version}"))
    } else {
        compileOnly(fg.deobf("mezz.jei:jei-1.18.2:" + project.jeiVersion))
        compileOnly(fg.deobf("curse.maven:jade-324717:${project.jade_id}"))
        compileOnly(fg.deobf("curse.maven:the-one-probe-245211:3550084"))
        compileOnly(fg.deobf("appeng:appliedenergistics2:${project.ae2Version}"))
    }

    // compileOnly(fg.deobf("curse.maven:look-at-that-355304:3035358"))

    runtimeOnly(group: 'com.kotori316', name: 'ScalableCatsForce'.toLowerCase(Locale.ROOT), version: '2.13.8-build-2', classifier: 'with-library') {
        transitive(false)
    }
    // Mixin
    // annotationProcessor("org.spongepowered:mixin:0.8.2:processor")
    // Test Dependencies.
    String JUPITER_VERSION = '5.7.1'
    testImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: JUPITER_VERSION)
    testImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: JUPITER_VERSION)
    testRuntimeOnly(group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: JUPITER_VERSION)
    testImplementation(group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.7.0')
    testImplementation(group: 'org.mockito', name: 'mockito-core', version: '3.+')
    testImplementation(group: 'org.mockito', name: 'mockito-inline', version: '3.+')

    game_test(group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: JUPITER_VERSION)
    game_test(group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: JUPITER_VERSION)
    game_test(group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: JUPITER_VERSION)
    game_test(group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.7.0')
}

configurations.all {
    resolutionStrategy {
        force(group: "org.apache.logging.log4j", name: "log4j-api", version: "2.17.+")
        force(group: "org.apache.logging.log4j", name: "log4j-core", version: "2.17.+")
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
def jarAttributeMap = [
        "Specification-Title"     : String.valueOf(project.name),
        "Specification-Vendor"    : "Kotori316",
        "Specification-Version"   : "1", // We are version 1 of ourselves
        "Implementation-Title"    : String.valueOf(project.name),
        "Implementation-Version"  : String.valueOf(project.version),
        "Implementation-Vendor"   : "Kotori316",
        "Implementation-Timestamp": ZonedDateTime.now().format(DateTimeFormatter.ISO_INSTANT),
        'Automatic-Module-Name'   : 'fluidtank',
]
jar {
    manifest {
        attributes(jarAttributeMap)
    }
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    setType('jar')
    builtBy 'reobfJar'
}

task srcJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    archiveClassifier.set('deobf')
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes(jarAttributeMap)
    }
}

// Tell the artifact system about our extra jars
artifacts {
    archives srcJar, deobfJar
}

test {
    useJUnitPlatform()
}

curseforge {
    apiKey = project.hasProperty("curseforge_additional-enchanted-miner_key") ? getProperty("curseforge_additional-enchanted-miner_key") : ""
    project {
        id = '291006'
        changelogType = 'markdown'
        changelog = getAllChangeLog()
        releaseType = 'release'
        addGameVersion(project.minecraftVersion as String)
        addGameVersion 'Forge'
        mainArtifact jar
        addArtifact deobfJar
        addArtifact srcJar
        relations {
            requiredDependency 'scalable-cats-force'
        }
    }
    options {
        curseGradleOptions.debug = false // defaults to false
        javaVersionAutoDetect = false
    }
}

githubRelease {
    repo.set('FluidTank')
    token = project.hasProperty("githubToken") ? getProperty("githubToken") : ""
    targetCommitish.set(project.getProperty("branch"))
    body.set(getLatestChangeLog())
    releaseAssets = files(
            jar,
            deobfJar,
            srcJar,
    )
}

task signJar2() {
    doLast {
        ant.signjar(
                jar: jar.getArchiveFile().get(),
                alias: project.hasProperty('keyStoreAlias') ? project.getProperty('keyStoreAlias') : "",
                keystore: project.hasProperty('keyStore') ? project.getProperty("keyStore") : "",
                storepass: project.hasProperty('keyStorePass') ? project.getProperty('keyStorePass') : "",
                sigalg: "SHA1withRSA",
                digestalg: "SHA-256",
                tsaurl: "http://timestamp.digicert.com"
        )
        ant.signjar(
                jar: deobfJar.getArchiveFile().get(),
                alias: project.hasProperty('keyStoreAlias') ? project.getProperty('keyStoreAlias') : "",
                keystore: project.hasProperty('keyStore') ? project.getProperty("keyStore") : "",
                storepass: project.hasProperty('keyStorePass') ? project.getProperty('keyStorePass') : "",
                sigalg: "SHA1withRSA",
                digestalg: "SHA-256",
                tsaurl: "http://timestamp.digicert.com"
        )
    }
    onlyIf {
        project.hasProperty('keyStoreAlias') &&
                project.hasProperty('keyStore') &&
                project.hasProperty('keyStorePass')
    }
}

if (!isInCI()) {
    // Runs this task automatically when build is ran.
    assemble.dependsOn(signJar2)
} else {
    // In CI
    tasks.withType(JavaExec) {
        // Avoid error of GL
        systemProperty("fml.earlyprogresswindow", false)
    }
}

void moveOldLog() {
    def new_log_file = file("changes.md")
    def old_log_file = file("old_logs.md")

    if (new_log_file.exists()) {
        if (!old_log_file.exists())
            old_log_file.createNewFile()
        def combined = new_log_file.text +
                System.lineSeparator() +
                "Build with ${project.forgeVersion}, Mapping: Official ${project.minecraftVersion}" +
                System.lineSeparator() * 2 +
                old_log_file.text
        old_log_file.setText(combined)
    }
}

String getAllChangeLog() {
    final old_log = file("old_logs.md")
    final header_file = file("header.md")

    def all_log = old_log.exists() ? old_log.text : "No change log provided."
    def header = header_file.exists() ? header_file.text : "#Change Log"
    return header + System.lineSeparator() + all_log
}

String getLatestChangeLog() {
    final def log_file = file("changes.md")
    final def header_file = file("header.md")
    def log = log_file.exists() ? log_file.text : "No change log provided."
    def header = header_file.exists() ? header_file.text : "#Change Log"
    return header + System.lineSeparator() + log
}

task makeChangeLog() {
    doLast {
        moveOldLog()
    }
}

def minecraftVersion = forgeVersion().substring(forgeVersion().lastIndexOf(":") + 1).split("-")[0]
task checkMethod() {
    doLast {
        System.out.println("Forge: ${forgeVersion()}" as String)
        System.out.println("CI_FORGE: ${System.getenv("CI_FORGE")}, latest: ${"latest" == System.getenv("CI_FORGE")}" as String)
        System.out.println("Minecraft ${minecraftVersion}" as String)
        System.out.println("Mapping ${project.minecraftVersion}" as String)
        System.out.println("Is In CI ${isInCI()}" as String)
        System.out.println("FilePath ${jar.getArchiveFile().get()}" as String)
        System.out.println("FilePath ${srcJar.getArchiveFile().get()}" as String)
        System.out.println("FilePath ${deobfJar.getArchiveFile().get()}" as String)
        System.out.println("Name $project.name" as String)
        System.out.println("BaseName $archivesBaseName" as String)
        System.out.println("ModVersion-fromProperty ${project.getProperty("modVersion")}" as String)
        System.out.println("ModVersion-fromProject ${project.version}" as String)
        System.out.println("Branch ${project.getProperty("branch")}" as String)
        System.out.println("*" * 20 as String)
        System.out.println("changes.md")
        System.out.println(getLatestChangeLog())
        System.out.println("*" * 20 as String)
        System.out.println("hasGitHubToken ${hasGitHubToken()}" as String)
        System.out.println("hasSignToken ${project.hasProperty("keyStore")}" as String)
        System.out.println("hasCurseForgeToken ${project.hasProperty("curseforge_additional-enchanted-miner_key")}" as String)
        System.out.println("*" * 20 as String)
        System.out.println("All Changes")
//        System.out.println(getAllChangeLog())
        System.out.println("*" * 20 as String)
        System.out.println("FindProperty of githubToken: project.findProperty(\"githubToken\") != null ${project.findProperty("githubToken") != null}" as String)
        System.out.println("FindProperty of gpr.user ${project.findProperty("gpr.user")}" as String)
        System.out.println("Username ${project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR") ?: "NULL"}" as String)
//        println("Property of gpr.user ${project.property("gpr.user")}" as String) // FAILED
        System.out.println("*" * 20 as String)
        System.out.println("Repository")
        getProject().getRepositories().stream().forEach { n ->
            System.out.println("${n.name} $n ${n instanceof MavenArtifactRepository ? n.getUrl() : "Not maven"}" as String)
        }
        System.out.println("Dependency" + System.lineSeparator() + "*" * 20 as String)
        getProject().getConfigurations().each { config ->
            System.out.println(config.getName())
            config.getAllDependencies().each { System.out.println(it) }
        }
        printProperties()
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/Kotori316/FluidTank")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR") ?: ""
                password = project.findProperty("githubToken") ?: System.getenv("REPO_TOKEN")
            }
        }
        maven {
            name = "BuildDir"
            url = file("$buildDir/repo")
        }
        maven {
            name = "AzureRepository"
            url = uri("https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1")
            credentials {
                username = project.findProperty("azureUserName") ?: System.getenv("AZURE_USER_NAME") ?: ""
                password = project.findProperty("azureToken") ?: System.getenv("AZURE_TOKEN") ?: "TOKEN"
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            artifactId = "fluidtank"
            artifact srcJar {
                archiveClassifier.set('sources')
                archiveExtension.set('jar')
            }
            artifact deobfJar {
                archiveClassifier.set('deobf')
                archiveExtension.set('jar')
            }
            artifact reobfArtifact
            pom {
                def v = forgeVersion()
                name = archivesBaseName
                description = "FluidTank for Minecraft ${project.minecraftVersion}, build with forge $v"
                url = 'https://github.com/Kotori316/FluidTank'
                packaging = "jar"
            }
        }
    }
}

task copyToDrive(type: Copy, dependsOn: "build") {
    def PATH_NAME = "drive_path"
    from(jar.getArchiveFile(), deobfJar.getArchiveFile(), srcJar.getArchiveFile())
    into(file(java.util.Optional.ofNullable(System.getenv(PATH_NAME)).orElse(".")))
    onlyIf {
        System.getenv(PATH_NAME) != null &&
                Files.exists(Paths.get(System.getenv(PATH_NAME)))
    }
}

static void printProperties() {
    System.out.println("PRINT_PROPERTIES_START")
    System.getProperties().entrySet().stream()
            .map { e -> Map.entry(String.valueOf(e.getKey()), e.getValue()) }
            .sorted(Map.Entry.comparingByKey())
            .forEach { e -> System.out.println(e.getKey() + ": " + e.getValue().toString()) }
    System.out.println("PRINT_PROPERTIES_END")
}

////////////////
// IntelliJ Project Import
// The Mixin annotation process does not have an obfuscation source when running through the IntelliJ compiler,
// thus we have to prevent it from being activated as part of importing this Gradle project into IntelliJ.
if (System.getProperty("idea.sync.active") == "true") {
    afterEvaluate {
        tasks.withType(JavaCompile).all {
            it.options.annotationProcessorPath = files()
        }
        tasks.withType(ScalaCompile).all {
            it.options.annotationProcessorPath = files()
        }
    }
}
