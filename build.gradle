import java.nio.file.Files
import java.nio.file.Paths
import java.util.stream.Collectors

plugins {
    id "scala"
    id("maven-publish")
    // https://maven.fabricmc.net/net/fabricmc/fabric-loom/
    id 'fabric-loom' version "0.13-SNAPSHOT"
    // id 'maven-publish'
    //noinspection SpellCheckingInspection
    id "com.github.breadmoirai.github-release" version "2.2.12"
    //noinspection SpellCheckingInspection
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

if (isInCI()) {
    String postFix = System.getenv("GITHUB_RUN_NUMBER") ?: "SNAPSHOT"
    // In remote CI/CD environment
    version = (version + "." + postFix + "-fabric")

    System.out.println("Set version to $version because I'm in CI." as String)
    System.out.println("CURSEFORGE_KEY: ${System.getenv().containsKey('CURSEFORGE_KEY')}" as String)
    System.out.println("AZURE_TOKEN: ${System.getenv().containsKey('AZURE_TOKEN')}" as String)
} else {
    version = (version + ".0" + "-fabric")
}

loom {
    runs {
        client {
            name "Client"
            runDir = Boolean.parseBoolean(System.getenv("FABRIC_SERVER")) ? "run-server" : "Minecraft"
        }
        server {
            name "Server"
            runDir = "run-server"
        }
        data {
            client()
            name "Data Generation"
            //noinspection SpellCheckingInspection
            vmArg "-Dfabric-api.datagen"
            //noinspection SpellCheckingInspection
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
            //noinspection SpellCheckingInspection
            vmArg "-Dfabric-api.datagen.strict-validation"

            ideConfigGenerated = true
            runDir = "run-server"
        }
        gameTest {
            name "GameTest"
            server()
            vmArg "-ea"
            //noinspection SpellCheckingInspection
            vmArg "-Dfabric-api.gametest"
            //noinspection SpellCheckingInspection
            vmArg "-Dfabric-api.gametest.report-file=${project.buildDir}/test-results/test/game_test.xml"
            runDir = "build/game_test"
            source sourceSets.test
        }
    }
}

sourceSets {
    main {
        resources {
            srcDir 'src/main/resources'
            srcDir 'src/generated/resources'
        }
    }
}

@SuppressWarnings("SpellCheckingInspection")
private static boolean isInCI() {
    return Boolean.parseBoolean(System.getenv("GITHUB_ACTIONS")) || Boolean.parseBoolean(System.getenv("CI")) ||
            (!System.getProperty("os.name").toLowerCase(Locale.ROOT).startsWith("windows") && Files.exists(Paths.get("/", ".dockerenv")))
}

repositories {
    maven {
        // location of a maven mirror for many mods, as a fallback
        name = "ModMaven.k-4u.nl"
        url = "https://modmaven.dev/"
        content {

        }
    }
    maven {
        name = "Azure-SLP"
        url = uri("https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1")
        content {
            it.includeModule("com.kotori316", "ScalableCatsForce".toLowerCase(Locale.ROOT))
            it.includeModule("com.kotori316", "ScalableCatsForce-MixIn".toLowerCase(Locale.ROOT))
            it.includeModule("org.typelevel", "cats-core_2.13")
            it.includeModule("org.typelevel", "cats-kernel_2.13")
            it.includeVersion("com.kotori316", "test_utility_dependency", "1.0-SNAPSHOT")
        }
    }
    maven {
        name = "REI"
        url = "https://maven.shedaniel.me/"
    }
    maven {
        name = "Curse Maven"
        url = "https://www.cursemaven.com"
        content {
            it.includeGroup("curse.maven")
        }
    }
    maven {
        name = "What The Hell Is That"
        url = "https://maven.bai.lol"
        content {
            it.includeVersion("mcp.mobius.waila", "wthit-api", "fabric-${project.wthit_version}")
            it.includeVersion("mcp.mobius.waila", "wthit", "fabric-${project.wthit_version}")
            it.includeVersion("lol.bai", "badpackets", "fabric-${project.badpackets_version}")
        }
    }
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    //noinspection SpellCheckingInspection
    modImplementation "net.fabricmc:fabric-language-scala:${project.fabric_scala_version}"
    // https://mvnrepository.com/artifact/org.typelevel/cats-core
    implementation group: 'org.typelevel', name: 'cats-core_2.13', version: '2.8.0'
    // https://mvnrepository.com/artifact/org.typelevel/cats-core
    include group: 'org.typelevel', name: 'cats-kernel_2.13', version: '2.8.0'
    // https://mvnrepository.com/artifact/org.typelevel/cats-core
    include group: 'org.typelevel', name: 'cats-core_2.13', version: '2.8.0'

    // library
    implementation "org.scala-lang:scala-library:2.13.8"
    implementation "com.google.code.findbugs:jsr305:3.0.1"

    modCompileOnly("mcp.mobius.waila:wthit-api:fabric-${project.wthit_version}")

    if (isInCI()) {
        // modCompileOnly
        modCompileOnly("RebornCore:RebornCore-1.19:${project.RebornCore_version}") {
            //noinspection SpellCheckingInspection
            exclude(group: "net.fabricmc.fabric-api")
        }
        modCompileOnly(group: "curse.maven", name: "jade-324717", version: project.jade_id)
        modCompileOnly("appeng:appliedenergistics2-fabric:${project.ae2_version}") {
            transitive(false)
        }
    } else {
        //noinspection SpellCheckingInspection
        modRuntimeOnly("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}")
        modRuntimeOnly(group: "dev.architectury", name: "architectury-fabric", version: project.architectury_version)
        modImplementation("RebornCore:RebornCore-1.19:${project.RebornCore_version}") {
            //noinspection SpellCheckingInspection
            exclude(group: "net.fabricmc.fabric-api")
        }
        modRuntimeOnly("TechReborn:TechReborn-1.19:${project.TechReborn_version}") {
            //noinspection SpellCheckingInspection
            exclude(group: "net.fabricmc.fabric-api")
        }
        modRuntimeOnly("mcp.mobius.waila:wthit:fabric-${project.wthit_version}")
        modRuntimeOnly(group: "lol.bai", name: "badpackets", version: "fabric-${project.badpackets_version}")
        modImplementation(group: "curse.maven", name: "jade-324717", version: project.jade_id)
        modImplementation("appeng:appliedenergistics2-fabric:${project.ae2_version}") {
            transitive(false)
        }
    }
    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}") {
        //noinspection SpellCheckingInspection
        exclude(group: "net.fabricmc.fabric-api")
    }

    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.

    // Test Dependencies.
    testImplementation(group: "com.kotori316", name: "test_utility_dependency", version: "1.0-SNAPSHOT")
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
    toolchain {
        it.languageVersion = JavaLanguageVersion.of(17)
    }
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from "LICENSE"
}

sourcesJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

test {
    useJUnitPlatform()
}

task removeTestWorld(type: Delete) {
    delete("${project.buildDir}/game_test/world")
    onlyIf {
        file("${project.buildDir}/game_test/world").exists() || !file("${project.buildDir}/test-results/test").exists()
    }
    doLast {
        mkdir("${project.buildDir}/test-results/test")
    }
}
runGameTest.dependsOn(removeTestWorld)
test.dependsOn runGameTest

def BRANCH = "1.19-fabric"

// PUBLISH
def joinedLog = String.join("\n", List.of(
        "Fluid Tank for ${project.minecraft_version} and Fabric.",
        "",
        isInCI() ? "Released via GitHub Action. This version may contain some bugs!" : "",
        "",
        "Only items which have recipe will work fine. Items without recipe are still in development.",
        "",
        "Requires:",
        "",
        "* [Fabric Language Scala](https://www.curseforge.com/minecraft/mc-mods/fabric-language-scala)",
        "* [Cloth Config API (Fabric)](https://www.curseforge.com/minecraft/mc-mods/cloth-config)",
        "",
        "See https://github.com/Kotori316/FluidTank/tree/${BRANCH} to get all change log.",
        "",
        "Libs:",
        "",
        "* Minecraft ${project.minecraft_version}",
        "* Mapping Official ${project.minecraft_version}",
        "* Fabric API ${project.fabric_version}",
        "* Fabric Loader ${project.loader_version}",
).stream().map { it.toString() }.toList())

githubRelease {
    repo.set('FluidTank')
    token = project.hasProperty("githubToken") ? getProperty("githubToken") : ""
    targetCommitish.set(BRANCH)

    body.set(joinedLog)
    releaseAssets = fileTree("build/libs")
}

curseforge {
    apiKey = project.hasProperty("curseforge_additional-enchanted-miner_key") ? getProperty("curseforge_additional-enchanted-miner_key") : (System.getenv("CURSEFORGE_KEY") ?: "")
    project {
        id = '411564'
        changelogType = 'markdown'
        addGameVersion 'Fabric'
        addGameVersion project.minecraft_version
        changelog = joinedLog
        releaseType = isInCI() ? 'alpha' : 'release'
        mainArtifact remapJar
        addArtifact jar
        relations {
            requiredDependency 'fabric-language-scala'
            requiredDependency 'cloth-config'
        }
    }
    options {
        curseGradleOptions.debug = false
        javaVersionAutoDetect = false
        forgeGradleIntegration = false
    }
}

task getCompileOptions() {
    doLast {
        List<String> strings = new ArrayList<>()
        strings.add("archivesBaseName: $archivesBaseName")
        strings.add("group: $group")
        strings.add("project.maven_group: ${project.maven_group}")
        strings.add("project.group: ${project.group}")
        strings.add("version: $version")
        strings.add("version in config: ${project.version}")
        strings.add("runs: ${loom.getRunConfigs().asMap.toMapString()}")
        strings.add("Absolute Client RunDir: ${project.projectDir.toPath().resolve(loom.getRunConfigs().getByName("client").runDir).toAbsolutePath()}")
        strings.add("Absolute Server RunDir: ${project.projectDir.toPath().resolve(loom.getRunConfigs().getByName("server").runDir).toAbsolutePath()}")
        strings.add("-" * 20)
        strings.add("Jar: ${jar.getArchiveFile().get()}")
        strings.add("Remap Jar ${remapJar.getArchiveFile().get()}")
        strings.add("Source Jar ${sourcesJar.getArchiveFile().get()}")
        // strings.add("RemapSource Jar ${remapSourcesJar.getOutput()}")
        strings.add(String.valueOf(fileTree("build/libs").getFiles()))

        println(strings.stream().collect(Collectors.joining(System.lineSeparator())))
    }
}

publishing {
    repositories {
        maven {
            name = "AzureRepository"
            url = uri("https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1")
            credentials {
                username = project.findProperty("azureUserName") ?: System.getenv("AZURE_USER_NAME") ?: ""
                password = project.findProperty("azureToken") ?: System.getenv("AZURE_TOKEN") ?: "TOKEN"
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            artifactId = "FluidTank".toLowerCase(Locale.ROOT)
            if (isInCI()) {
                version = "${project.snapshot_version}.0-fabric-SNAPSHOT"
            } else {
                version = "${project.mod_version}.0-fabric"

            }
            from components.java
            pom {
                name = archivesBaseName
                description = "FluidTank for Minecraft ${project.minecraft_version}, built with Fabric ${project.fabric_version}"
                url = 'https://github.com/Kotori316/FluidTank/commits/' + BRANCH
                packaging = "jar"
                withXml {
                    //noinspection SpellCheckingInspection
                    List<String> requiredArtifacts = ["cloth", "fabric-language-scala", "libblockattributes"]
                    def pomNode = asNode() as Node
                    Set<String> added = []
                    pomNode.dependencies.'*'.findAll() { Node node ->
                        def valueList = node.value() as NodeList
                        String artifactId = ((valueList.get(1) as Node).value() as NodeList).get(0)
                        if (!added.contains(artifactId)) {
                            if (requiredArtifacts.stream().noneMatch { artifactId.contains(it) }) {
                                node.parent().remove(node)
                            } else {
                                added.add(artifactId)
                            }
                        }
                    }
                }
            }
        }
    }
}
